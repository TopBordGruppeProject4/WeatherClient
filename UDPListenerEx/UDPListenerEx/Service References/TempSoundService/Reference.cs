//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UDPListenerEx.TempSoundService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Dataset", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole1")]
    [System.SerializableAttribute()]
    public partial class Dataset : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SoundLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TempInsideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeatherField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SoundLevel {
            get {
                return this.SoundLevelField;
            }
            set {
                if ((this.SoundLevelField.Equals(value) != true)) {
                    this.SoundLevelField = value;
                    this.RaisePropertyChanged("SoundLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TempInside {
            get {
                return this.TempInsideField;
            }
            set {
                if ((this.TempInsideField.Equals(value) != true)) {
                    this.TempInsideField = value;
                    this.RaisePropertyChanged("TempInside");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weather {
            get {
                return this.WeatherField;
            }
            set {
                if ((object.ReferenceEquals(this.WeatherField, value) != true)) {
                    this.WeatherField = value;
                    this.RaisePropertyChanged("Weather");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TempSoundService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GETDATAFUCK", ReplyAction="http://tempuri.org/IService1/GETDATAFUCKResponse")]
        string GETDATAFUCK();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GETDATAFUCK", ReplyAction="http://tempuri.org/IService1/GETDATAFUCKResponse")]
        System.Threading.Tasks.Task<string> GETDATAFUCKAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpecificDateNOLIKE", ReplyAction="http://tempuri.org/IService1/GetSpecificDateNOLIKEResponse")]
        UDPListenerEx.TempSoundService.Dataset[] GetSpecificDateNOLIKE(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpecificDateNOLIKE", ReplyAction="http://tempuri.org/IService1/GetSpecificDateNOLIKEResponse")]
        System.Threading.Tasks.Task<UDPListenerEx.TempSoundService.Dataset[]> GetSpecificDateNOLIKEAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpecificDate", ReplyAction="http://tempuri.org/IService1/GetSpecificDateResponse")]
        UDPListenerEx.TempSoundService.Dataset[] GetSpecificDate(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpecificDate", ReplyAction="http://tempuri.org/IService1/GetSpecificDateResponse")]
        System.Threading.Tasks.Task<UDPListenerEx.TempSoundService.Dataset[]> GetSpecificDateAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Datatransfer", ReplyAction="http://tempuri.org/IService1/DatatransferResponse")]
        string Datatransfer(string date, double temp, double sound, string weather);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Datatransfer", ReplyAction="http://tempuri.org/IService1/DatatransferResponse")]
        System.Threading.Tasks.Task<string> DatatransferAsync(string date, double temp, double sound, string weather);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : UDPListenerEx.TempSoundService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<UDPListenerEx.TempSoundService.IService1>, UDPListenerEx.TempSoundService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GETDATAFUCK() {
            return base.Channel.GETDATAFUCK();
        }
        
        public System.Threading.Tasks.Task<string> GETDATAFUCKAsync() {
            return base.Channel.GETDATAFUCKAsync();
        }
        
        public UDPListenerEx.TempSoundService.Dataset[] GetSpecificDateNOLIKE(string date) {
            return base.Channel.GetSpecificDateNOLIKE(date);
        }
        
        public System.Threading.Tasks.Task<UDPListenerEx.TempSoundService.Dataset[]> GetSpecificDateNOLIKEAsync(string date) {
            return base.Channel.GetSpecificDateNOLIKEAsync(date);
        }
        
        public UDPListenerEx.TempSoundService.Dataset[] GetSpecificDate(string date) {
            return base.Channel.GetSpecificDate(date);
        }
        
        public System.Threading.Tasks.Task<UDPListenerEx.TempSoundService.Dataset[]> GetSpecificDateAsync(string date) {
            return base.Channel.GetSpecificDateAsync(date);
        }
        
        public string Datatransfer(string date, double temp, double sound, string weather) {
            return base.Channel.Datatransfer(date, temp, sound, weather);
        }
        
        public System.Threading.Tasks.Task<string> DatatransferAsync(string date, double temp, double sound, string weather) {
            return base.Channel.DatatransferAsync(date, temp, sound, weather);
        }
    }
}
